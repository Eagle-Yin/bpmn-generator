// 初始化 bpmn-js Modeler
const bpmnModeler = new BpmnJS({
    container: '#canvas',
    keyboard: {
        bindTo: window
    }
});

/**
 * 根据结构化的JSON数据生成BPMN 2.0 XML字符串
 * @param {Array} nodes - 描述流程的节点数组
 * @returns {string} - BPMN XML 字符串
 */
function generateBpmnXml(nodes) {
    if (!nodes || nodes.length === 0) {
        // 提供一个默认的空流程图XML
        return `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" 
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" 
                  id="Definitions_1" 
                  targetNamespace="http://bpmn.io/schema/bpmn">
  <bpmn:process id="Process_1" isExecutable="false">
    <bpmn:startEvent id="StartEvent_1" name="流程开始"/>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="179" y="159" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="175" y="202" width="44" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;
    }

    let processElements = '';
    let sequenceFlows = '';
    const nodeMap = new Map(nodes.map(node => [node.id, node]));

    // 生成BPMN元素（事件、任务、网关）
    nodes.forEach(node => {
        const name = node.name ? `name="${escapeXml(node.name)}"` : '';
        switch (node.type) {
            case 'startEvent':
                processElements += `<bpmn:startEvent id="${node.id}" ${name}></bpmn:startEvent>\n`;
                break;
            case 'task':
                processElements += `<bpmn:task id="${node.id}" ${name}></bpmn:task>\n`;
                break;
            case 'endEvent':
                processElements += `<bpmn:endEvent id="${node.id}" ${name}></bpmn:endEvent>\n`;
                break;
            case 'exclusiveGateway':
                 processElements += `<bpmn:exclusiveGateway id="${node.id}" ${name}></bpmn:exclusiveGateway>\n`;
                 break;
        }

        // 生成连线（SequenceFlow）
        if (node.source) {
            const sources = Array.isArray(node.source) ? node.source : [node.source];
            sources.forEach((sourceId, index) => {
                 const flowId = `Flow_${sourceId}_${node.id}_${index}`;
                 let flowName = '';
                 const sourceNode = nodeMap.get(sourceId);
                 if(sourceNode && sourceNode.type === 'exclusiveGateway' && sourceNode.conditions){
                    const conditionText = sourceNode.conditions[node.id];
                    if(conditionText) {
                        flowName = `name="${escapeXml(conditionText)}"`;
                    }
                 }
                 sequenceFlows += `<bpmn:sequenceFlow id="${flowId}" sourceRef="${sourceId}" targetRef="${node.id}" ${flowName}/>\n`;
            });
        }
    });

    return `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                  xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" 
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" 
                  id="Definitions_1" 
                  targetNamespace="http://bpmn.io/schema/bpmn">
  <bpmn:process id="Process_1" isExecutable="true">
    ${processElements}
    ${sequenceFlows}
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <!-- BPMN DI is auto-generated by bpmn-js -->
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;
}

// XML转义函数，防止注入
function escapeXml(unsafe) {
    return unsafe.replace(/[<>&'"]/g, function (c) {
        switch (c) {
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '&': return '&amp;';
            case '\'': return '&apos;';
            case '"': return '&quot;';
        }
    });
}

/**
 * 渲染BPMN图表
 * @param {string} xml - BPMN XML 字符串
 */
async function renderDiagram(xml) {
    try {
        await bpmnModeler.importXML(xml);
        const canvas = bpmnModeler.get('canvas');
        canvas.zoom('fit-viewport');
        console.log('BPMN diagram rendered successfully!');
    } catch (err) {
        console.error('Error rendering BPMN diagram:', err);
    }
}

/**
 * 下载文件
 * @param {string} filename - 文件名
 * @param {string} data - 文件内容
 * @param {string} type - MIME 类型
 */
function downloadFile(filename, data, type) {
    const blob = new Blob([data], { type });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// 绑定下载按钮事件
document.getElementById('download-xml').addEventListener('click', async () => {
    try {
        const { xml } = await bpmnModeler.saveXML({ format: true });
        downloadFile('process.bpmn', xml, 'application/xml');
    } catch (err) {
        console.error('Could not save BPMN 2.0 diagram', err);
    }
});

document.getElementById('download-svg').addEventListener('click', async () => {
    try {
        const { svg } = await bpmnModeler.saveSVG();
        downloadFile('process.svg', svg, 'image/svg+xml');
    } catch (err) {
        console.error('Could not save SVG diagram', err);
    }
});


// 主执行逻辑：页面加载时执行
window.addEventListener('DOMContentLoaded', () => {
    // 从URL获取数据
    const urlParams = new URLSearchParams(window.location.search);
    const dataParam = urlParams.get('data');
    
    let nodes = null;
    if (dataParam) {
        try {
            // 解码并解析JSON数据
            nodes = JSON.parse(decodeURIComponent(dataParam));
        } catch (e) {
            console.error('Failed to parse data from URL:', e);
            alert('URL中的流程数据格式错误！');
        }
    }

    // 生成XML并渲染
    const bpmnXml = generateBpmnXml(nodes);
    renderDiagram(bpmnXml);
});
